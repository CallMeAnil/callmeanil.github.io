<!DOCTYPE html>
<html>
<head>
	<title>SmallestDiff</title>
</head>
<body>

	<script>
		function getDiff(s1,s2){
			var str="";
			if(s1.length>s2.length){
				str=s1.substr(s1.indexOf(s2),s2.length);
			}else{
				str=s2.substr(s2.indexOf(s1),s1.length);
			}
			return str;
		}
		function getSmallestDiff(s1, s2){
			var s1Half1 = s1.split('*')[0],
			s1Half2 = s1.split('*')[1],
			s2Half1 = s2.split('*')[0],
			s2Half2 = s2.split('*')[1];

			var diff1 = getDiff(s1Half1,s2Half1),
			diff2 = getDiff(s1Half2,s2Half2),
			diff,
			i,minLen;
			for (i = 0,minLen=Math.min(s1Half1.length, s2Half1.length); i < minLen; i++) {
				if (s1Half1.charAt(i) !== s2Half1.charAt(i))
					return 'impossible';
			}
			for (i = 0,minLen = Math.min(s1Half2.length, s2Half2.length); i < minLen; i++) {
				if (s1Half2.charAt(i) !== s2Half2.charAt(i))
					return 'impossible';
			}
			var shortestString='';
			s1Half1 = s1Half1.replace(diff1,'');
			s1Half2 = s1Half2.replace(diff2,'');
			s2Half1 = s2Half1.replace(diff1,'');
			s2Half2 = s2Half2.replace(diff2,'');

			debugger;
			if(s1Half1.length===0 && s1Half2.length===0){
				return diff1+s2Half1+s2Half2+diff2;
			}
			if(s2Half1.length===0 && s2Half2.length===0){
				return diff1+s1Half1+s1Half2+diff2;
			}

			if(s1Half2.length===0&&s2Half1.length===0){
				shortestString=diff1+s1Half1+s2Half2+diff2;
				for (i = 0; i < Math.min(s1Half1.length, s2Half2.length); i++) {

					if (s1Half1.substring(s1Half1.length - i - 1).indexOf(s2Half2.substring(0, i + 1))>-1) {
						shortestString = diff1 + s1Half1 + s2Half2.substring(i + 1) + diff2;
					} 
				}
				//diff=getDiff(s1Half1,s2Half2);
				//s1Half1 = s1Half1.replace(diff,'');
				//s2Half2 = s2Half2.replace(diff,'');
				//shortestString=diff1+getDiff(s1Half1, s2Half2)+diff2;
				//shortestString = diff1+diff+getDiff(s1Half1, s2Half2)+diff+diff2
				return shortestString;
			}else{
				shortestString=diff1+s2Half1+s1Half2+diff2;

		//diff=getDiff(s2Half1,s1Half2);
		//s2Half1 = s2Half1.replace(diff,'');
		//s1Half2 = s1Half2.replace(diff,'');
		//shortestString = diff1+getDiff(s2Half1,s1Half2)+diff2;
		//shortestString = diff1+diff+getDiff(s2Half1,s1Half2)+diff+diff2;
		for (i = 0; i < Math.min(s1Half2.length, s2Half1.length); i++) {
			if (s2Half1.substring(s2Half1.length - i - 1).indexOf(s1Half2.substring(0, i + 1))>-1) {
				shortestString = diff1 + s2Half1 + s1Half2.substring(i + 1) + diff2;
			}
		}
		return shortestString;
	}

	console.log(diff1);
	console.log(diff2);
}
/*

getSmallestDiff("TOPC*DER","T*PCODER")
getSmallestDiff("HELLO*","HI*")
getSmallestDiff("GOOD*LUCK","*")
getSmallestDiff("*SAMPLETEST","THIRDSAMPLE*")
getSmallestDiff("*TOP","*CODER")
getSmallestDiff("*","A*")
getSmallestDiff("*A","B*")
getSmallestDiff("LASTCASE*","*LASTCASE")
*/
</script>
</body>
</html>


package sample;

import static java.lang.Math.*;

/* TopCoder SRM 392
 * Easy Problem 250 Points: TwoStringMasks
 * Type: Simulation
 * Solution: Remove equal strings off the start and end such that it is of the form
 * (*A) and (B*) then find the largest overlap of A and B and you are done.
 */
public class StringMatch {

	// main method
	static String im = "impossible";

	public static String shortestCommon(String s1, String s2) {
		String s1Half1 = s1.substring(0, s1.indexOf("*"));
		String s2Half1 = s2.substring(0, s2.indexOf("*"));
		String s1Half2 = s1.substring(s1.indexOf("*") + 1);
		String s2Half2 = s2.substring(s2.indexOf("*") + 1);

		String diff1 = "";
		for (int i = 0; i < min(s1Half1.length(), s2Half1.length()); i++) {
			if (s1Half1.charAt(i) != s2Half1.charAt(i))
				return im;
			diff1 += s1Half1.charAt(i);
		}
		String diff2 = "";
		String s1Half2Rev = reverse(s1Half2);
		String s2Half2Rev = reverse(s2Half2);
		for (int i = 0; i < min(s1Half2Rev.length(), s2Half2Rev.length()); i++) {
			if (s1Half2Rev.charAt(i) != s2Half2Rev.charAt(i))
				return im;
			diff2 = s1Half2Rev.charAt(i) + diff2;
		}

		int lena = min(s1Half1.length(), s2Half1.length());
		s1Half1 = s1Half1.substring(lena);
		s2Half1 = s2Half1.substring(lena);
		lena = min(s1Half2Rev.length(), s2Half2Rev.length());
		s1Half2Rev = s1Half2Rev.substring(lena);
		s2Half2Rev = s2Half2Rev.substring(lena);
		if (s1Half1.length() == 0 && s1Half2Rev.length() == 0)
			return diff1 + s2Half1 + reverse(s2Half2Rev) + diff2;
		if (s2Half1.length() == 0 && s2Half2Rev.length() == 0)
			return diff1 + s1Half1 + reverse(s1Half2Rev) + diff2;

		if (s1Half2Rev.length() == 0 && s2Half1.length() == 0) {
			s2Half2 = reverse(s2Half2Rev);
			String a = diff1 + s1Half1 + s2Half2 + diff2;
			for (int i = 0; i < min(s1Half1.length(), s2Half2.length()); i++) {
				
				if (s1Half1.substring(s1Half1.length() - i - 1).equals(s2Half2.substring(0, i + 1))) {
					System.out.println(s2Half2.substring(i + 1));
					a = diff1 + s1Half1 + s2Half2.substring(i + 1) + diff2;
				}
			}
			return a;
		} else {
			s1Half2 = reverse(s1Half2Rev);
			String a = diff1 + s2Half1 + s1Half2 + diff2;
			for (int i = 0; i < min(s1Half2.length(), s2Half1.length()); i++) {
				if (s2Half1.substring(s2Half1.length() - i - 1).equals(s1Half2.substring(0, i + 1))) {
					a = diff1 + s2Half1 + s1Half2.substring(i + 1) + diff2;
				}
			}
			return a;
		}
	}

	private static String reverse(String b2) {
		String n = "";
		for (int i = 0; i < b2.length(); i++) {
			n = b2.charAt(i) + n;
		}
		return n;
	}

	public static void main(String[] args) {

		//System.out.println(shortestCommon("TOPC*DER", "T*PCODER"));
		//System.out.println(shortestCommon("socialtwi*t", "soc*altwist"));
		//System.out.println(shortestCommon("thirdsample*", "*sampletext"));
		System.out.println(shortestCommon("*a", "*b"));

	}
}
